package OM_JDBC;


import java.awt.Color;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Level;
import java.util.logging.Logger;

//import javax.swing.table.TableColumn;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author zaurak (OMDB) le 13.03.2018
 * exemple pour nos apprentis informaticiens
 * aussi brillants que "zaurak"
 * J'ai laissé les commentaires générés automatiquement par NETBEANS
 */
public class GestionSousCategories extends javax.swing.JFrame {

    String chaineConnectDB = "jdbc:mysql://localhost:3306/om_db_latex_final_copie";
    String user = "root";
    String password = "root";
    /**
     * Creates new form GestionSousCategories
     */
    SelectLigneJtable SelectLigneTab = new SelectLigneJtable(); 
    // OMDB 13.03.2018 : Fonction pour se connecter à la BD 
    public Connection getConnection()
    {
        Connection conn = null;


        
        try {
            conn = DriverManager.getConnection(chaineConnectDB,user,password);
            return conn;
        } catch (SQLException ex) {
            Logger.getLogger(GestionSousCategories.class.getName()).log(Level.SEVERE, null, ex);
            // OMDB 13.03.2018 : Problème de connection à la BD, affiche un message et ferme l'application !
            JOptionPane.showMessageDialog(null, "GROS PROBLEME DE CONECTION A LA BD...!!");
            System.exit(0);
            return null;
        }
    }
    
    
    public GestionSousCategories() {
        // OMDB 13.03.2018 : Netbeans écrit automatiquement le code des composants graphiques et l'appel à initComponents()
        initComponents();
        // OMDB 27.03.2018 : Désactive les boutons et le message d'erreur car il faut tester la chaîne de caractère avant de "toucher" la BD
        jLabel2_messageSousCategorie.setVisible(false);
        jButton3_insert_sous_categorie.setEnabled(false);
        jButton1_update.setEnabled(false);
        jButton4_delete_sous_categorie.setEnabled(false);
        
        
        // OMDB 13.03.2018 : On doit remplir avec une requête SQL le SWING CONTROL TABLE
        boolean req_remplir_sous_cat = remplir_table_sous_categories();
        // OMDB 13.03.2018 : Le champ est actif pour une insertion de donnée 
        jTextField1_Nom_Sous_Categorie.setEnabled(true);
        // OMDB 13.03.2018 : On place le curseur à l'intérieur du champ
        jTextField1_Nom_Sous_Categorie.requestFocus();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1_Nom_Sous_Categorie = new javax.swing.JTextField();
        jButton1_update = new javax.swing.JButton();
        jButton2_fermer = new javax.swing.JButton();
        jButton3_insert_sous_categorie = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1_sous_categories = new javax.swing.JTable();
        jButton4_delete_sous_categorie = new javax.swing.JButton();
        jLabel2_messageSousCategorie = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Sous catégorie");

        jTextField1_Nom_Sous_Categorie.setToolTipText("");
        jTextField1_Nom_Sous_Categorie.setName(""); // NOI18N
        jTextField1_Nom_Sous_Categorie.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1_Nom_Sous_CategorieKeyReleased(evt);
            }
        });

        jButton1_update.setText("UPDATE");
        jButton1_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1_updateActionPerformed(evt);
            }
        });

        jButton2_fermer.setText("FERMER");
        jButton2_fermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2_fermerActionPerformed(evt);
            }
        });

        jButton3_insert_sous_categorie.setText("INSERT");
        jButton3_insert_sous_categorie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3_insert_sous_categorieActionPerformed(evt);
            }
        });

        jTable1_sous_categories.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1_sous_categories.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1_sous_categoriesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1_sous_categories);

        jButton4_delete_sous_categorie.setText("DELETE");
        jButton4_delete_sous_categorie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4_delete_sous_categorieActionPerformed(evt);
            }
        });

        jLabel2_messageSousCategorie.setText("jLabel2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1_Nom_Sous_Categorie)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3_insert_sous_categorie)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1_update)
                                    .addComponent(jButton4_delete_sous_categorie))
                                .addGap(18, 18, 18)
                                .addComponent(jButton2_fermer))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2_messageSousCategorie))
                        .addGap(0, 75, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1_Nom_Sous_Categorie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(jLabel2_messageSousCategorie)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3_insert_sous_categorie)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1_update)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2_fermer)
                            .addComponent(jButton4_delete_sous_categorie)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1_updateActionPerformed
        // TODO add your handling code here:
        // OMDB 13.03.2018 : Récupérer le contenu du champ, pour le tester ensuite.
        String NomSousCategorie = jTextField1_Nom_Sous_Categorie.getText();
        // OMDB 13.03.2018 : Si le contenu du champ est vide, on doit avertir l'utilisateur par un message CLAIR
        if (NomSousCategorie.isEmpty() || !(SelectLigneTab.getidSousCategorieSL() > 0)) {
            JOptionPane.showMessageDialog(null, " cliquer sur une ligne de la table pour la modifier ");
        } else {
            SelectLigneTab.setidSousCategorieSL(0);
            // OMDB 13.03.2018 : Récupèrer le numéro de la ligne sélectionnée dans le SWING CONTROL TABLE
            int no_ligne_selectionnee = jTable1_sous_categories.getSelectedRow();
            // OMDB 13.03.2018 : "debug" personnel pour bien vérifier le numéro de la ligne sélectionnée, c'est idiot... 
            // mais en informatique on est face à certaines phobies des humains qui ont fabriqués ces SWING'S CONTROL'S...
            // Il faut supprimer cette ligne lorsque l'application est totalement fonctionnelle
            //JOptionPane.showMessageDialog(null, "no_ligne_selectionnee "+no_ligne_selectionnee);

            // OMDB 13.03.2018 : Pour récupérer les valeurs des champs on doit travailler avec le "model" de la table
            // défini dans la partie "DESIGN"
            DefaultTableModel tm = (DefaultTableModel)jTable1_sous_categories.getModel();
            // OMDB 13.03.2018 : Récupérer la valeur contenue dans le champ 0 (notre id de la table)
            // et le convertit en "String"
            String idsouscategorie = tm.getValueAt(no_ligne_selectionnee, 0).toString();
            // OMDB 13.03.2018 : le convertit en "int", nécessaire pour faire la requête d'UPDATE par la suite
            int INTidsouscategorie = Integer.parseInt(idsouscategorie);

           // OMDB 13.03.2018 : Récupèrer le contenu du champ du formulaire
            String nomsouscategorie = jTextField1_Nom_Sous_Categorie.getText();
            // OMDB 13.03.2018 : Tramettre les paramètres pour l'UPDATE
            boolean req_update_ok = update_sous_categorie(nomsouscategorie, INTidsouscategorie);
            // OMDB 13.03.2018 : Vide le champ pour forcer l'utilisateur à sélectionner à nouveau une ligne.
            jTextField1_Nom_Sous_Categorie.setText("");
            jTextField1_Nom_Sous_Categorie.setEnabled(true);

        }

    }//GEN-LAST:event_jButton1_updateActionPerformed

    private void jButton2_fermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2_fermerActionPerformed
        // TODO add your handling code here:
        // OMDB 19.03.2018 : Ferme la fenêtre de gestion des sous catégories
        this.dispose();
    }//GEN-LAST:event_jButton2_fermerActionPerformed

    private void jButton3_insert_sous_categorieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3_insert_sous_categorieActionPerformed
        // TODO add your handling code here:
        String NomSousCategorie = jTextField1_Nom_Sous_Categorie.getText(); // Valeur contenue dans le champ
        if (NomSousCategorie.isEmpty()) {
            JOptionPane.showMessageDialog(null, " Remplir le champ, ne doit pas être vide ");
        } else {
            boolean status = ajouter_sous_categorie(jTextField1_Nom_Sous_Categorie.getText());
        }

    }//GEN-LAST:event_jButton3_insert_sous_categorieActionPerformed

    private void jButton4_delete_sous_categorieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4_delete_sous_categorieActionPerformed
        // TODO add your handling code here:

        String NomSousCategorie = jTextField1_Nom_Sous_Categorie.getText();
        if (NomSousCategorie.isEmpty()) {
            JOptionPane.showMessageDialog(null, " cliquer sur une ligne de la table pour l'EFFACER ");
        } else {
            int no_ligne_selectionnee = jTable1_sous_categories.getSelectedRow();
            DefaultTableModel tm = (DefaultTableModel)jTable1_sous_categories.getModel();

            String idsouscategorie = tm.getValueAt(no_ligne_selectionnee, 0).toString();
            int INTidsouscategorie = Integer.parseInt(idsouscategorie);
            //String nomsouscategorie_av = tm.getValueAt(no_ligne_selectionnee, 1).toString();
            
            
            //jTable1_sous_categories.changeSelection(WIDTH, WIDTH, rootPaneCheckingEnabled, rootPaneCheckingEnabled);
            


            //String nomsouscategorie = jTextField1_Nom_Sous_Categorie.getText();
            boolean delete_ok = delete_sous_categorie(INTidsouscategorie);
            //boolean req_update_ok = update_sous_categorie(nomsouscategorie, INTidsouscategorie);
            JOptionPane.showMessageDialog(null, "DELETE OK");
            // Vide le champ
            jTextField1_Nom_Sous_Categorie.setText("");
        }
    }//GEN-LAST:event_jButton4_delete_sous_categorieActionPerformed

    private void jTable1_sous_categoriesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1_sous_categoriesMouseClicked
        // TODO add your handling code here:
        SelectLigneTab.selectionnerLigne();
        jButton1_update.setEnabled(true);
        jButton4_delete_sous_categorie.setEnabled(true);
    }//GEN-LAST:event_jTable1_sous_categoriesMouseClicked

    private void jTextField1_Nom_Sous_CategorieKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1_Nom_Sous_CategorieKeyReleased
        // TODO add your handling code here:
        
        // OMDB 27.03.2018 : Par exemple un seul mot OU un mot un espace et un mot
        //String expression = "\\w+|(\\w+\\s\\w+)";
        String expression = "[\\wàâäéêèöü]+|([\\wàâäéêèöü]+\\s[\\wàâäéêèöü]+)";

        // OMDB 27.03.2018 : Par exemple une adresse gmail.com
        //String expression = "^[\\w.+\\-]+@gmail\\.com$";

        if (Validation.validationChamp(jTextField1_Nom_Sous_Categorie.getText(),expression)) {
            // OMDB 27.03.2018 : Le message d'erreur est changé en ok
            jLabel2_messageSousCategorie.setText("OK");
            // OMDB 27.03.2018 : Le message RASSURANT est visible en vert
            jLabel2_messageSousCategorie.setVisible(true);
            jLabel2_messageSousCategorie.setForeground(Color.GREEN);

            // OMDB 27.03.2018 : Active le bouton car la chaîne de caractère est correcte         
            jButton3_insert_sous_categorie.setEnabled(true);

        } else {

            jLabel2_messageSousCategorie.setText("Chaîne pas valide");
            // OMDB 27.03.2018 : Le message d'erreur est visible en rouge
            jLabel2_messageSousCategorie.setVisible(true);
            jLabel2_messageSousCategorie.setForeground(Color.RED);
            
            // OMDB 27.03.2018 : Désactive le bouton car la chaîne de caractère est fausse
            jButton3_insert_sous_categorie.setEnabled(false);
        }
        
        
    }//GEN-LAST:event_jTextField1_Nom_Sous_CategorieKeyReleased


    
    
    
    private boolean ajouter_sous_categorie(String NomSousCategorie) {
        boolean infoIsValid = true;
        String sql_insert_sc = "INSERT INTO t_sous_categorie (Name_Sub_category, Nom_Sous_Categorie) VALUES ('','"+NomSousCategorie+"');";
        //SELECT * FROM `t_sous_categorie` WHERE `Nom_Sous_Categorie` LIKE '%ni%' COLLATE utf8mb4_unicode_ci
        String sql_select_doublon = "SELECT *  FROM t_sous_categorie WHERE Nom_Sous_Categorie COLLATE utf8_unicode_ci LIKE '"+NomSousCategorie+"'";
        try{
            // OMDB 13.03.2018 : "préparer" la requête (ici sans paramètres) pour la BD.
            PreparedStatement pst = getConnection().prepareStatement(sql_select_doublon);
            // OMDB 13.03.2018 : Envoyer la requête à la BD
            ResultSet rs = pst.executeQuery();            

            int count = 0;
            while(rs.next())
            {
                count = count +1;
            }

            if(count >= 1)
            {
                infoIsValid = false;
                JOptionPane.showMessageDialog(null, "Doublon... pas de modifications");

            } else {
                // OMDB 13.03.2018 : "préparer" la requête (ici sans paramètres) pour la BD.
                PreparedStatement pstInsert = getConnection().prepareStatement(sql_insert_sc);
                // OMDB 13.03.2018 : Envoyer la requête à la BD
                pstInsert.execute();
                // OMDB 13.03.2018 : Ferme la connection à la BD, même si c'est fait de façon automatique si on quitte l'application.
                pstInsert.close();
                // OMDB 27.03.2018 : Désactive les boutons pour empêcher des fausses "envies" de cliquer sur des boutons...
                // alors que le champ est vide....
                jButton3_insert_sous_categorie.setEnabled(false);
                jButton1_update.setEnabled(false);
                jButton4_delete_sous_categorie.setEnabled(false);
                jLabel2_messageSousCategorie.setVisible(false);                
                // OMDB 13.03.2018 : Rassurer l'utilisateur            
                JOptionPane.showMessageDialog(null, "INSERT "+ NomSousCategorie +" OK");                
            }
   
            // OMDB 13.03.2018 : Ferme la connection à la BD, même si c'est fait de façon automatique si on quitte l'application.
            pst.close();  

            // OMDB 13.03.2018 : Recharger la jtable
            boolean gt = remplir_table_sous_categories();
            // Vide le champ
            jTextField1_Nom_Sous_Categorie.setText("");
            return true;    

        }
        catch(Exception e){
            // OMDB 13.03.2018 : Avertir l'utilisateur d'un sacré problème d'accès aux tables... héhé !!!
            JOptionPane.showMessageDialog(null, "Connection à la BD OK ! \nProblème avec l'insertion de données dans la BD !");
            // OMDB 13.03.2018 : Imprime les erreurs pour pouvoir debugger
            e.printStackTrace();
            // OMDB 13.03.2018 : QUITTE L'APPLICATION
            System.exit(0);
            return false;
        }
    }

    
    private boolean remplir_table_sous_categories() {

        // OMDB 13.03.2018 : Juste pour tester différentes façons d'afficher les données...si les VIANDES 1 (INFO 1) veulent bien tester... cette bandes de MAC (Manches à Café)
        //String sql_select_sc = "SELECT * FROM t_sous_categorie";
      String sql_select_sc = "SELECT Id_Sous_Categorie, Nom_Sous_Categorie COLLATE utf8_unicode_ci as Nom_Sous_Categorie  FROM t_sous_categorie ORDER BY Nom_Sous_Categorie COLLATE utf8_unicode_ci ASC";
        //String sql_select_sc = "SELECT Id_Sous_Categorie, Nom_Sous_Categorie  FROM t_sous_categorie ORDER BY Nom_Sous_Categorie ASC";

        try{
            // OMDB 13.03.2018 : "préparer" la requête (ici sans paramètres) pour la BD.
            PreparedStatement pst = getConnection().prepareStatement(sql_select_sc);
            // OMDB 13.03.2018 : Permet d'afficher des données dans un modèle de table qu'il est possible de personnaliser.
            DefaultTableModel tm = (DefaultTableModel)jTable1_sous_categories.getModel();
            // OMDB 13.03.2018 : Sans cette commande on se retrouve avec 4 lignes vides au début de la table.
            tm.setRowCount(0);
            // OMDB 13.03.2018 : Définir le nom des colonnes.
            String entete_sous_categories[] = {"Id", "Nom sous catégories"};
            tm.setColumnIdentifiers(entete_sous_categories);
            
            // OMDB 13.03.2018 : Envoyer la requête à la BD
            ResultSet rs = pst.executeQuery();

            // OMDB 13.03.2018 : Parcourir toutes les lignes de la table
            while(rs.next())
            {
                Object o[] = {rs.getInt("Id_Sous_Categorie"),rs.getString("Nom_Sous_Categorie")};
                // OMDB 13.03.2018 : ajoute dans le SWING CONTROL TABLE une ligne de donnée
                tm.addRow(o);
            }
            
            // OMDB 13.03.2018 : Ferme la connection à la BD, même si c'est fait de façon automatique si on quitte l'application.
            pst.close();
            // OMDB 13.03.2018 : Autoriser la sélection d'une seule ligne 
            jTable1_sous_categories.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            jTable1_sous_categories.setRowSelectionAllowed(true);
    
            // OMDB 13.03.2018 : C'est une fonction. Tout s'est bien déroulé ...donc on lui assigne la valeur TRUE
            return true;
        }
        catch(Exception e){
            // OMDB 13.03.2018 : Avertir l'utilisateur d'un sacré problème d'accès aux tables... héhé !!!
            JOptionPane.showMessageDialog(null, "Connection à la BD OK ! \nProblème avec l'accès aux tables de la BD !");
            // OMDB 13.03.2018 : Imprime les erreurs pour pouvoir debugger
            e.printStackTrace();
            // OMDB 13.03.2018 : QUITTE L'APPLICATION
            System.exit(0);
            return false;
        }       
    }
    
    
    private boolean update_sous_categorie(String nomsouscategorie, int idsouscategorie) {
        boolean infoIsValid = true;
        String sql_select_doublon = "SELECT *  FROM t_sous_categorie WHERE Nom_Sous_Categorie LIKE '"+nomsouscategorie+"'";
        String sql_update_sc = "UPDATE t_sous_categorie SET Nom_Sous_Categorie = '"+ nomsouscategorie +"' WHERE Id_Sous_Categorie = "+ idsouscategorie;

              
        try{
            // OMDB 13.03.2018 : "préparer" la requête (ici sans paramètres) pour la BD.
            PreparedStatement pst = getConnection().prepareStatement(sql_select_doublon);
            // OMDB 13.03.2018 : Envoyer la requête à la BD
            ResultSet rs = pst.executeQuery();            

            int count = 0;
            while(rs.next())
            {
                count = count +1;
            }

            if(count >= 1)
            {
                infoIsValid = false;
                JOptionPane.showMessageDialog(null, "Doublon...");

            } else {
                // OMDB 13.03.2018 : "préparer" la requête (ici sans paramètres) pour la BD.
                PreparedStatement pstUpdate = getConnection().prepareStatement(sql_update_sc);
                // OMDB 13.03.2018 : Envoyer la requête à la BD
                pstUpdate.executeUpdate(sql_update_sc);
                // OMDB 13.03.2018 : Ferme la connection à la BD, même si c'est fait de façon automatique si on quitte l'application.
                pstUpdate.close();
                // OMDB 27.03.2018 : Désactive les boutons pour empêcher des fausses "envies" de cliquer sur des boutons...
                // alors que le champ est vide....
                jButton3_insert_sous_categorie.setEnabled(false);
                jButton1_update.setEnabled(false);
                jButton4_delete_sous_categorie.setEnabled(false);
                jLabel2_messageSousCategorie.setVisible(false);
                
                // OMDB 13.03.2018 : Rassurer l'utilisateur            
                JOptionPane.showMessageDialog(null, "UPDATE OK");                
            }

            pst.close();

            // OMDB 13.03.2018 : Recharger la jtable
            boolean gt = remplir_table_sous_categories();


            return true;    

        } catch(Exception e){
             // OMDB 13.03.2018 : Avertir l'utilisateur d'un sacré problème d'accès aux tables... héhé !!!
            JOptionPane.showMessageDialog(null, "Connection à la BD OK ! \nProblème avec l'update de données dans la BD !");
            // OMDB 13.03.2018 : Imprime les erreurs pour pouvoir debugger
            e.printStackTrace();
            // OMDB 13.03.2018 : QUITTE L'APPLICATION
            System.exit(0);
            return false;
        } 
    }
    
        
    private boolean delete_sous_categorie(int idsouscategorie) {

        String sql_delete_sc = "DELETE FROM t_sous_categorie WHERE Id_Sous_Categorie = "+ idsouscategorie;

        try{           
            PreparedStatement pst = getConnection().prepareStatement(sql_delete_sc);

            pst.executeUpdate(sql_delete_sc);
            
            // Remplir à nouveau la table
            boolean gt = remplir_table_sous_categories();
            //JOptionPane.showMessageDialog(null, idsouscategorie + " delete ");
            
            // OMDB 27.03.2018 : Désactive les boutons pour empêcher des fausses "envies" de cliquer sur des boutons...
            // alors que le champ est vide....
            jButton3_insert_sous_categorie.setEnabled(false);
            jButton1_update.setEnabled(false);
            jButton4_delete_sous_categorie.setEnabled(false);
            jLabel2_messageSousCategorie.setVisible(false);
            return true;    

        }
        catch(Exception e){
            e.printStackTrace();
            return false;
        }
    }


 
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
    
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionSousCategories.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionSousCategories.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionSousCategories.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionSousCategories.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new GestionSousCategories().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1_update;
    private javax.swing.JButton jButton2_fermer;
    private javax.swing.JButton jButton3_insert_sous_categorie;
    private javax.swing.JButton jButton4_delete_sous_categorie;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2_messageSousCategorie;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable1_sous_categories;
    public static javax.swing.JTextField jTextField1_Nom_Sous_Categorie;
    // End of variables declaration//GEN-END:variables
}



